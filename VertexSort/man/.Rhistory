s = socketConnection(port=12345, server=T)
readLines(s,1)
readLines(s,1)
nc -l 12345
log.socket = socketConnection(port=12345, server=T)
readChar(s,13)
readChar(s,13)
readChar(s,13)
readChar(s,13)
readChar(s,13)
readChar(s,13)
readChar(s,13)
readChar(s,13)
readChar(s,13)
close(s)
log.socket = socketConnection(port=12345, server=T)
readLines(s)
q()
Log <- function(text, ...) {
  msg <- sprintf(paste0(as.character(Sys.time()), ": ", text, "\n"), ...)
  cat(msg)
  write.socket(log.socket, msg)
}
log.socket <- make.socket(port=4000)
log.socket <- make.socket(port=4000, server=T)
Log("Processing block %d of %d", 24)
Log("Processing block %d of %d", 24, n.blocks)
Log <- function(text, i) {
  msg <- sprintf(paste0(as.character(Sys.time()), ": ", text, "\n"), i)
  cat(msg)
  write.socket(log.socket, msg)
}
msg <- sprintf(paste0(as.character(Sys.time()), ": ", text, "\n"), 12)
class(Sys.time())
Sys.time()
as.character(Sys.time())
paste0(as.character(Sys.time()), ": ", text, "\n")
text = "Processing block %d of %d"
paste0(as.character(Sys.time()), ": ", text, "\n")
sprintf(paste0(as.character(Sys.time()), ": ", text, "\n"), 1, 100)
cat(sprintf(paste0(as.character(Sys.time()), ": ", text, "\n"), 1, 100))
Log <- function(text, i) {
  msg <- sprintf(paste0(as.character(Sys.time()), ": ", text, "\n"), iteration, iterations)
  cat(msg)
  write.socket(log.socket, msg)
}
Log("Processing block %d of %d", 1, 100)
Log <- function(text, ...) {
  msg <- sprintf(paste0(as.character(Sys.time()), ": ", text, "\n"), iteration, iterations)
  cat(msg)
  write.socket(log.socket, msg)
}
Log("Processing block %d of %d", 1, 100)
Log <- function(text, iteration, iterations) {
  msg <- sprintf(paste0(as.character(Sys.time()), ": ", text, "\n"), iteration, iterations)
  cat(msg)
  write.socket(log.socket, msg)
}
Log("Processing block %d of %d", 1, 100)
close(log.socket)
?close
close.socket(log.socket)
library(VertexSort)
  rand_g <- rpd(kp_net, 250)
  rand_g <- rpd(kp_net, 250, TRUE, 2)
Switch_edges
Switch_edges()
Switch_edges
vgraph = kp_net
vgraph
viteration_no = 250
vparallel=TRUE
vcpus=2
  rand_g <- rpd(kp_net, 250, TRUE, 2)   # with parallel mode
q()
library(VertexSort)
rpd
rpd
rand_g <- rpd(kp_net, 250)
rand_g <- rpd(kp_net, 250)
    close.socket(4000)
vgraph = kp_net
viteration_no = 250
vparallel=TRUE
vcpus = 2
log("Processing block %d of %d", 1, viteration_no)
Log
text = x
msg <- sprintf(paste0(as.character(Sys.time()), ": ", text, "\n"), iteration, iterations)
text = "Processing block %d of %d"
iteration = 1
iterations = 250
j = 1
viteration_no = 250
sprintf(paste0(as.character(Sys.time()), ": ", text, "\n"), j, 250)
Log("Processing block %d of %d", j, viteration_no)
rpd()
rpd
Log("Processing block %d of %d", 2, viteration_no)
Log("Processing block %d of %d", 4, viteration_no)
close.socket(log.socket)
  rand_g <- rpd(kp_net, 250)
close.socket(log.socket)
close.socket(log.socket)
  rand_g <- rpd(kp_net, 250, TRUE, 2)
  rand_g <- rpd(kp_net, 250, TRUE, 2)
  rand_g <- rpd(kp_net, 250, TRUE, 2)
length(rand_g)
rand_g[[250]]
  rand_g <- rpd(kp_net, 50, TRUE, 2)
q()
    log.socket       <- make.socket(port=4001, server=T)
    log.socket       <- make.socket(port=4000)
    log.socket       <- socketConnection(port=4000)
    log.socket       <- socketConnection(port=12345)
library(VertexSort)
vgraph = kp_net
viteration_no = 40
vparallel = TRUE
vcpus = 3
    Log("Processing block %d of %d", 1, viteration_no)
Log
    log.socket       <- make.socket(port=4000, server=T)
    log.socket       <- make.socket(port=4000, server=T)
    Log("Processing block %d of %d", 1, viteration_no)
    Log("Processing block %d of %d", 2, viteration_no)
    Log("Processing block %d of %d", 3, viteration_no)
    close.socket(log.socket)
    log.socket       <- make.socket(port=4000, server=T)
getwd()
cpus=2
viteration_no = 100
viteration_no = 250
rpid(kp_net, 230, TRUE, 3)
rpd(kp_net, 230, FALSEE, 3)
rpd(kp_net, 230, FALSE, 3)
library(VertexSort)
  rand_g <- rpd(kp_net, 100)
  rand_g <- rpd(kp_net, 250, TRUE, 5)   # with parallel mode
  rand_g <- rpd(kp_net, 250, TRUE, 5)   # with parallel mode
  rand_g <- rpd(kp_net, 250, TRUE, 5)   # with parallel mode
  rand_g <- rpd(kp_net, 250, TRUE, 5)   # with parallel mode
  rand_g <- rpd(kp_net, 250, TRUE, 5)   # with parallel mode
  rand_g <- rpd(kp_net, 250, TRUE, 5)   # with parallel mode
  rand_g <- rpd(kp_net, 250, TRUE, 5)   # with parallel mode
  rand_g <- rpd(kp_net, 250, TRUE, 5)   # with parallel mode
  rand_g <- rpd(kp_net, 250, TRUE, 5)   # with parallel mode
  ptm <- proc.time()
  rand_g <- rpd(kp_net, 250)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 5)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 5)            # without parallel mode
  proc.time() - ptm

options(warn=-1)
  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 5)            # without parallel mode
  proc.time() - ptm

options(warn)
options()
options(warn)
options(warn = 0)
  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 5)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 5)            # without parallel mode
  proc.time() - ptm

h <- function(w) if( any( grepl( "Unknown option on commandline: SNOWLIB", w) ) ) invokeRestart( "muffleWarning" )
  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 5)            # without parallel mode
  proc.time() - ptm

h <- function(w) if( any( grepl( "Unknown option on commandline: SNOWLIB", w) ) ) invokeRestart( "muffleWarning" )
library(snowfall)
nworkers <- 3
sfInit(parallel=TRUE, cpus=nworkers)

loginit <- function(logfile) {
  library(futile.logger)
  flog.appender(appender.file(logfile))
  NULL
}
sfClusterApply(sprintf('out_%02d.log', seq_len(nworkers)), loginit)
install.packages(futile.logger, repos="http://cran.us.r-project.org")
install.packages("futile.logger", repos="http://cran.us.r-project.org")
library("futile.logger")
library(snowfall)
nworkers <- 3
sfInit(parallel=TRUE, cpus=nworkers)

loginit <- function(logfile) {
  library(futile.logger)
  flog.appender(appender.file(logfile))
  NULL
}
sfClusterApply(sprintf('out_%02d.log', seq_len(nworkers)), loginit)
getwd()
sprintf('out_%02d.log', seq_len(nworkers))
warning(FALSE)
  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 5)            # without parallel mode
  proc.time() - ptm

warning(TRUE)
traceback()
  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 5)            # without parallel mode
  proc.time() - ptm

j = 1
msg <- sprintf(paste0(as.character(Sys.time()), ": Randomizing network %d of %d"), 1, 100)
  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 5)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 200, TRUE, 5)            # without parallel mode

  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 1000, TRUE, 10)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 1000, TRUE, 10)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 10)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 3)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 3)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 3)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 3)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 3)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 100, TRUE, 3)            # without parallel mode
  proc.time() - ptm

  ptm <- proc.time()
  rand_g <- rpd(kp_net, 10)            # without parallel mode
  proc.time() - ptm

q()
getwd()
log_name = "test.Rd"
q()
summary(kp_net)
summary(vs_kp_net)
  rpd_rand_g <- rpd(kp_net, 10000, TRUE, 10)
  rpsd_rand_g <- rpsd(kp_net, 10000, TRUE, 10)
  ropd_rand_g <- ropd(kp_net, 10000, TRUE, 10)
  rpid_rand_g <- rpid(kp_net, 10000, TRUE, 10)
  rpod_rand_g <- rpod(kp_net, 10000, TRUE, 10)
rand_rpd
rpd_rand_g[[1]]
head(get.data.frame(rpd_rand_g[[1]]))
rpd_rand_edges = get.data.frame(rpd_rand_g[[1]])
head(rpd_rand_edges)
dim(rpd_rand_edges)
vs_rpd_rand_edges = vertex.sort(rpd_rand_edges)
rpd_rand_edges = get.data.frame(rpd_rand_g[[2]])
vs_rpd_rand_edges = vertex.sort(rpd_rand_edges)
summary(vs_rpd_rand_edges)
?vertex.sort
class(rpd_rand_edges)
dim(rpd_rand_edges)
head(rpd_rand_edges)
edges = rpd_rand_edges
dim(traits)
returned = list(graph=vgraph, edges=interactions, traits=traits, actors=sort(actors), targets=targets,
                    top.actors=top_layer_actors, core.actors=core_layer_actors, bottom.actors=bottom_layer_actors,
                    excluded.actors=excluded_actors, disconnected.actors=disconnected_actors,
                    disconnected.targets=disconnected_targets, levels.no=levels_no, nodes.in.levels=nodes_in_levels)
returned = list(graph=vgraph, edges=interactions, traits=traits, actors=sort(actors), targets=targets,
                    top.actors=top_layer_actors, core.actors=core_layer_actors, bottom.actors=bottom_layer_actors,
                    excluded.actors=excluded_actors, disconnected.actors=disconnected_actors,
                    disconnected.targets=disconnected_targets, levels.no=levels_no, nodes.in.levels=nodes_in_levels)
vgraph
dim(edges)
dim(traits)
actors
length(targets)
top.actor
top.actors
top_layer_actors
core_layer_actors
head(traits)
subset(traits, layer=="Core")
class(nodes_levels)
head(nodes_levels)
class(g_nodes_levels)
head(g_nodes_levels)
head(edges)
t_edges = sapply(edges, function(x) str(x))
rpd_rand_edges = get.data.frame(rpd_rand_g[[2]])
head(rpd_rand_edges[,1])
 from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, sringsAsFactors=F)
head(edges)
 from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
head(edges)
head(edges[,1])
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)
from = as.character(rpd_rand_g[[1]][,1])
to = as.character(rpd_rand_rand_g[[1]][,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
from = as.character(rpd_rand_g[[1]][,1])
to = as.character(rpd_rand_rand_g[[1]][,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
from = as.character(rpd_rand_g[[1]][,1])
to = as.character(rpd_rand_g[[1]][,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
from = as.character(rpd_rand_g[[2]][,1])
to = as.character(rpd_rand_g[[2]][,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
head(edges[,1])
head(edges[,2])
rpd_rand_edges = get.data.frame(rpd_rand_g[[1]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(rpd_rand_edges)
summary(vs_rpd_rand_g)
rpd_rand_edges = get.data.frame(rpd_rand_g[[2]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(rpd_rand_edges)
summary(vs_rpd_rand_g)
head(from)
head(to)
head(edges)
head(edges[,1])
head(edges[,2])
rpd_rand_edges = get.data.frame(rpd_rand_g[[1]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)
names(summary(vs_rpd_rand_g))
rpd_rand_edges = get.data.frame(rpd_rand_g[[1]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[2]])

from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[3]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[4]])

from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[5]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[6]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[7]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[8]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[9]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[10]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[11]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[12]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[102]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[122]])

from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[306]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[506]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
rpd_rand_edges = get.data.frame(rpd_rand_g[[606]])
from = as.character(rpd_rand_edges[,1])
to = as.character(rpd_rand_edges[,2])
edges = data.frame(from=from, to=to, stringsAsFactors=F)
vs_rpd_rand_g = vertex.sort(edges)
summary(vs_rpd_rand_g)$layers_description
q()
